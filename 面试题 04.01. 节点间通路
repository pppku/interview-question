/* question

节点间通路。给定有向图，设计一个算法，找出两个节点之间是否存在一条路径。

示例1:

 输入：n = 3, graph = [[0, 1], [0, 2], [1, 2], [1, 2]], start = 0, target = 2
 输出：true
示例2:

 输入：n = 5, graph = [[0, 1], [0, 2], [0, 4], [0, 4], [0, 1], [1, 3], [1, 4], [1, 3], [2, 3], [3, 4]], start = 0, target = 4
 输出 true
提示：

节点数量n在[0, 1e5]范围内。
节点编号大于等于 0 小于 n。
图中可能存在自环和平行边。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/route-between-nodes-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/* solution

class Solution {
public:
    bool dfs(vector<bool>& visit, vector<vector<int>>& graph, int start, int target)
    {
        int size = visit.size();

        for(int i = 0; i < size; ++i)
        {
            if(!visit[i])
            {
                if(graph[i][0] == start && graph[i][1] == target) return true;

                visit[i] = true;
                if(graph[i][1] == target && dfs(visit, graph, start, graph[i][0])) return true;
                visit[i] = false;

            }
        }
        return false;
    }

    bool findWhetherExistsPath(int n, vector<vector<int>>& graph, int start, int target) {
        int size = graph.size();

        vector<bool> visit(size);

        return dfs(visit, graph, start, target);
    }
};

*/
