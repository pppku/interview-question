/* question

输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

 

示例 1：

输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
示例 2：

输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
 

限制：

0 <= matrix.length <= 100
0 <= matrix[i].length <= 100

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/* solution

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {

        vector<int> result;
        if(matrix.size() == 0) return result;

        int hang = matrix.size();
        int lie = matrix[0].size();
        int sum = hang * lie;
        int map = 0;

        int bit[102][102] = {0};
        int i = 0, j = 0;

        
        while(map < sum)
        {
            // 向右移动
            while(j < lie && bit[i][j] == 0 && map < sum)
            {
                result.push_back(matrix[i][j]);
                bit[i][j] = 1;
                j++;
                map++;
            }
            j--;
            i++;

            // 向下移动
            while(i < hang && bit[i][j] == 0 && map < sum)
            {
                result.push_back(matrix[i][j]);
                bit[i][j] = 1;
                i++;
                map++;
            }
            i--;
            j--;

            // 向左移动
            while(j >= 0 && bit[i][j] == 0 && map < sum)
            {
                result.push_back(matrix[i][j]);
                bit[i][j] = 1;
                j--;
                map++;
            }
            j++;
            i--;

            // 向上移动
            while(i >= 0 && bit[i][j] == 0 && map < sum)
            {
                result.push_back(matrix[i][j]);
                bit[i][j] = 1;
                i--;
                map++;
            }
            i++;
            j++;

        }

        return result;
    }
};


*/
