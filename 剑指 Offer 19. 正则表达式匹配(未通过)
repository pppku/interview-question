/* question

请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。

示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 *，无连续的 '*'。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


*/

/* solution

未解决*到底匹配几次的问题

class Solution {
public:
    bool isMatch(string s, string p) {
 
        if(s == "")
        {
            if(p == ".*" || p == "") return true;
            else return false;
        }
 
        int s_size = s.size();
        int p_size = p.size();
        int i = 0, j = 0;

        while(i < s_size && j < p_size)
        {
            // 匹配s[i] 与p[j] p[j + 1]
            char tem_s = s[i];
            char tem_p = p[j];

            // 匹配到末尾情况
            if(j + 1 == p_size)
            {
                if(s[i] == p[j] || p[j] == '.')
                {
                    i++;
                    j++;
                    continue;
                }
                else return false;
            }

            // 匹配到中间情况 分6种
            char tem_pp = p[j + 1];

            if(tem_p != '.' && tem_p != '*')
            {
                // a*
                if(tem_pp == '*')
                {
                    // 匹配0次
                    if(s[i] != p[j]) 
                    {
                        j = j + 2;
                        continue;
                    }

                    // 匹配n次
                    while(i < s_size && s[i] == p[j] ) i++;
                    j = j + 2;
                    continue;
                }
                // aa a.
                else
                {
                    if(s[i] == p[j]) 
                    {
                        i++;
                        j++;
                        continue;
                    }
                    else return false;
                }
            }

            if(tem_p == '.')
            {
                // .* 匹配任意字符
                if(tem_pp == '*')
                {
                    j = j + 2;
                    while(p[j] == '.' && p[j + 1] =='*' && j < p_size) j = j + 2;

                    // 如果只剩下.* 直接匹配
                    if(j == p_size) i = s_size;

                    // .*后边还有就匹配剩下的
                    else
                    {
                        i = s_size - (p_size - j);
                    }
                    continue;
                }

                // .a ..
                else
                {
                    i++;
                    j++;
                    continue;
                }
            }
        }

        // .* 末尾0次
        while(i == s_size && j < p_size && p[j + 1] == '*') j = j + 2;


        // 比对指针是否匹配完
        if(i >= s_size && j >= p_size) return true;
        else return false;

    }
};

*/
