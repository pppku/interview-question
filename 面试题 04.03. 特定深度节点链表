/* question

给定一棵二叉树，设计一个算法，创建含有某一深度上所有节点的链表（比如，若一棵树的深度为 D，则会创建出 D 个链表）。返回一个包含所有深度的链表的数组。

 

示例：

输入：[1,2,3,4,5,null,7,8]

        1
       /  \ 
      2    3
     / \    \ 
    4   5    7
   /
  8

输出：[[1],[2,3],[4,5,7],[8]]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/list-of-depth-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> listOfDepth(TreeNode* tree) {
        vector<ListNode*> res;

        if(!tree) return res;

        queue<TreeNode*> myque;
        myque.push(tree);

        while(!myque.empty())
        {
            int size = myque.size();
            TreeNode* thead = myque.front();
            if(thead->left) myque.push(thead->left);
            if(thead->right) myque.push(thead->right);

            ListNode* head = new ListNode(thead->val);
            ListNode* cur = head;
            myque.pop();

            for(int i = 1; i < size; ++i)
            {
                thead = myque.front();
                ListNode* temp = new ListNode(thead->val);

                cur->next = temp;
                cur = temp;
                myque.pop();
                
                if(thead->left) myque.push(thead->left);
                if(thead->right) myque.push(thead->right);
            }

            cur->next = NULL;
            res.push_back(head);


            
        }


        return res;
        
    }
};

*/
