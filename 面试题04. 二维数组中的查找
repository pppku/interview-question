/* question


在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

 

示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。

 

限制：

0 <= n <= 1000

0 <= m <= 1000

*/


/* solution1
找规律，由于矩阵的特殊性，我们可以从左上角或者右下角开始搜索（保证了每次判断后继续遍历的路径只有一条）
note：注意输入时[] [[]]的特殊处理

时间O(m + n)
空间O(1)

class Solution {
public:
    bool findNumberIn2DArray(vector<vector<int>>& matrix, int target) {
        int i = 0; 
        if(matrix.size() == 0) return false;
        if(matrix[0].size() == 0) return false;
        if(target < matrix[0][0]) return false;

        int row = 0;
        int col = matrix[0].size() - 1;

        while(row < matrix.size() && col > -1)
        {
            if(matrix[row][col] == target) return true;
            else if(matrix[row][col] > target) col--;
            else row++;
        }

        return false;
    }
};

*/

/* else solutions

暴力法
时间O(m*n)
空间O(1)

行列二分法
时间O(logm * logn)
空间O(1)

*/
