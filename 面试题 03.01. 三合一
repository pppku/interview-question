/* question

三合一。描述如何只用一个数组来实现三个栈。

你应该实现push(stackNum, value)、pop(stackNum)、isEmpty(stackNum)、peek(stackNum)方法。stackNum表示栈下标，value表示压入的值。

构造函数会传入一个stackSize参数，代表每个栈的大小。

示例1:

 输入：
["TripleInOne", "push", "push", "pop", "pop", "pop", "isEmpty"]
[[1], [0, 1], [0, 2], [0], [0], [0], [0]]
 输出：
[null, null, null, 1, -1, -1, true]
说明：当栈为空时`pop, peek`返回-1，当栈满时`push`不压入元素。
示例2:

 输入：
["TripleInOne", "push", "push", "push", "pop", "pop", "pop", "peek"]
[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]
 输出：
[null, null, null, null, 2, 1, -1, -1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/three-in-one-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/* solution

class TripleInOne {
    int mystackSize;
    vector<vector<int>> stack;
    vector<int> index;
public:
    TripleInOne(int stackSize) {
        stack.push_back(vector<int>(stackSize));
        stack.push_back(vector<int>(stackSize));
        stack.push_back(vector<int>(stackSize));
        index.push_back(0);
        index.push_back(0);
        index.push_back(0);
        mystackSize = stackSize;
    }
    
    void push(int stackNum, int value) {
        int id = index[stackNum];
        if(id == mystackSize) return;

        stack[stackNum][id] = value;
        index[stackNum]++;
    }
    
    int pop(int stackNum) {
        int id = index[stackNum];
        if(id == 0) return -1;

        index[stackNum]--;
        return stack[stackNum][id - 1];
    }
    
    int peek(int stackNum) {
        int id = index[stackNum];
        if(id == 0) return -1;

        return stack[stackNum][id - 1];
    }
    
    bool isEmpty(int stackNum) {
        int id = index[stackNum];
        if(id == 0) return true;
        else return false;
    }
};

/**
 * Your TripleInOne object will be instantiated and called as such:
 * TripleInOne* obj = new TripleInOne(stackSize);
 * obj->push(stackNum,value);
 * int param_2 = obj->pop(stackNum);
 * int param_3 = obj->peek(stackNum);
 * bool param_4 = obj->isEmpty(stackNum);
 */

*/
