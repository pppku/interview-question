/* question

给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
所求解集为:
[
  [1,2,2],
  [5]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/combination-sum-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution

class Solution {
public:
    vector<vector<int>> res;
    vector<int> tem;
    set<vector<int>> myset;

    void dfs(vector<int>& candidates, int target, int sum, int index)
    {
        // 剪枝操作
        if(sum > target) return;
        if(sum == target)
        {
            myset.insert(tem);
            return;
        }

        // 回溯递归
        for(int i = index; i < candidates.size(); ++i)
        {
            sum += candidates[i];
            tem.push_back(candidates[i]);
            dfs(candidates, target, sum, i + 1);
            tem.pop_back();
            sum -= candidates[i];
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        // 排序保证顺序
        sort(candidates.begin(), candidates.end());
        dfs(candidates, target, 0, 0);

        // 用set保证无重复
        set<vector<int>>::iterator it;
        for(it = myset.begin(); it != myset.end(); ++it)
        {
            res.push_back(*it);
        }
        return res;
    }
};

*/
