/* question

输入两个链表，找出它们的第一个公共节点。

如下面的两个链表：



在节点 c1 开始相交。

 

示例 1：



输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
 

示例 2：



输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
 

示例 3：



输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
解释：这两个链表不相交，因此返回 null。
 

注意：

如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/* solution1 对齐法

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int A_len = 0, B_len = 0;

        // 计算量表长度
        ListNode* tem1 = headA;
        while(!tem1) 
        {
            A_len++;
            tem1 = tem1->next;
        }

        ListNode* tem2 = headB;
        while(!tem2) 
        {
            B_len++;
            tem2 = tem2->next;
        }


        // 尾部对齐
        int mov;

        if(A_len > B_len)
        {
            tem1 = headA;
            tem2 = headB;
            mov = A_len - B_len;
        }
        else
        {
            tem1 = headB;
            tem2 = headA;
            mov = B_len - A_len;
        }

        for(int i = 0; i < mov; ++i)
        {
            tem1 = tem1->next;
        }

        // 匹配
        while(!tem1)
        {
            if(tem1 == tem2) break;
            
            else
            {
                tem1 = tem1->next;
                tem2 = tem2->next;
            }
            
        }



        return tem1;
    }
};

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {

        // 获取链表长度
        int alen = 0, blen = 0;

        ListNode tem1 = headA;
        ListNode tem2 = headB;

        while(tem1 != null)
        {
            alen++;
            tem1 = tem1.next;
        }
        while(tem2 != null)
        {
            blen++;
            tem2 = tem2.next;
        }

        // 对齐
        int mov = 0;
        if(alen > blen)
        {
            tem1 = headA;
            tem2 = headB;
            mov = alen - blen;
        }
        else
        {
            tem1 = headB;
            tem2 = headA;
            mov = blen - alen;
        }

        for(int i = 0; i < mov; ++i) tem1 = tem1.next;

        while(tem1 != null)
        {
            if(tem1 == tem2) break;

            tem1 = tem1.next;
            tem2 = tem2.next;
        }

        return tem1;

    }
}

*/

/* solution2 双指针法

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *node1 = headA;
        ListNode *node2 = headB;
        
        while (node1 != node2) {
            node1 = node1 != NULL ? node1->next : headB;
            node2 = node2 != NULL ? node2->next : headA;
        }
        return node1;
    }
};

*/
