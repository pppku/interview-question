/* question

请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串"+100"、"5e2"、"-123"、"3.1416"、"0123"都表示数值，但"12e"、"1a3.14"、"1.2.3"、"+-5"、"-1E-16"及"12e+5.4"都不是。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


1.合法 .2合法
首位有空格合法 中间有空格合法

*/

/* solution


class Solution {
public:
    bool isNumber(string s) {

        string ss;
        int begin = 0; 
        int end = s.size();

        for(int i = 0; i < s.size(); ++i)
        {
            if(s[i] != ' ') break;
            else begin++;
        }
        for(int i = s.size() - 1; i >= 0; --i)
        {
            if(s[i] != ' ') break;
            else end--;
        }
        if(isOperation(s[begin])) begin++;
        if(begin == end) return false;
        for(int i = begin; i < end; ++i)
        {
            ss += s[i];
        }

        if(haveE(ss))
        {
            // 科学计数法数字-大小写e-正负数-e后面纯数字
            bool beforeE = true;
            bool dotm = true;
            int opt = 0;

            // 初值处理
            if(ss[0] == 'e') return false;
            else if(dot(ss[0]))
            {
                if(ss.size() == 1) return false;
                if(ss[1] == 'e') return false;
                dotm = false;
            }
            else if(Number(ss[0]));
            else return false;

            for(int i = 1; i < ss.size(); ++i)
            {
                if(ss[i] == 'e')
                {
                    if(!beforeE) return false;
                    beforeE = false;
                    if(i + 1 == ss.size()) return false;
                    //if(!Number(ss[i - 1])) return false;
                    opt = i;
                    continue;
                }
                if(beforeE)
                {
                    if(dot(ss[i]))
                    {
                        if(dotm)
                        {
                            dotm = false;
                            continue;
                        }
                        else return false;
                    }
                    else if(Number(ss[i]));
                    else return false;
                }
                else 
                {
                    if(dot(ss[i])) return false;
                    if(isOperation(ss[i]))
                    {
                        if(i != opt + 1) return false;
                        if(i + 1 == ss.size() || !Number(ss[i + 1])) return false;
                    }
                    else
                    {
                        if(!Number(ss[i])) return false;
                    }
                    
                }
            }
            return true;
        }
        else
        {
            // 一般数字-正负数-小数点
            bool dotm = true;

            // 初值处理
            if(dot(ss[0]))
            {
                if(ss.size() == 1) return false;
                dotm = false;
            }
            else if(Number(ss[0]));
            else return false;

            // 后续值处理
            for(int i = 1; i < ss.size(); ++i)
            {
                if(dot(ss[i]) && Number(ss[i - 1]))
                {
                    if(dotm)
                    {
                        dotm = false;
                        continue;
                    }
                    else return false;
                }
                if(!Number(ss[i])) return false;
            }

            return true;
        }

        
    }

    bool Number(char c)
    {
        if(c >= 48 && c <= 57) return true;
        else return false;
    }

    bool dot(char c)
    {
        if(c == '.') return true;
        else return false;
    }

    bool isOperation(char c)
    {
        if(c == '+' || c == '-') return true;
        else return false;
    }

    bool haveE(string s)
    {
        for(int i = 0; i < s.size(); ++i)
        {
            if(s[i] == 'e') return true;
        }

        return false;
    }

};

*/
