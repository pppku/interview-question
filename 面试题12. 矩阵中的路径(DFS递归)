/* question

请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

 

示例 1：

输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true
示例 2：

输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false
提示：

1 <= board.length <= 200
1 <= board[i].length <= 200

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/* solution

深度优先搜索DFS递归
时间：O(K^3*M*N)
空间：O(K)



class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {

        if(board.size() == 0) return false;
        else if(board[0].size() == 0) return false;
        int i, j;

        for(i = 0; i < board.size(); ++i)
        for(j = 0; j < board[0].size(); ++j)
        {
            if(match(i, j, board, word, 0))
                return true;
        }

        return false;
    }

    int match(int i, int j, vector<vector<char>>& board, string word, int count)
    {
        if(i >= board.size() || i < 0 || j >= board[0].size() || j < 0 || board[i][j] != word[count])
            return 0;
        if(count == word.size() - 1)
            return 1;

        char tmp = board[i][j];
        board[i][j] = '/';
        
        int res = match(i + 1, j, board, word, count + 1) || match(i - 1, j, board, word, count + 1) || 
                      match(i, j + 1, board, word, count + 1) || match(i , j - 1, board, word, count + 1);
        
        board[i][j] = tmp;

        return res;

    }
};
*/
