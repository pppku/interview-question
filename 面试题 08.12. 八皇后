/* question

设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。

注意：本题相对原题做了扩展

示例:

 输入：4
 输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
 解释: 4 皇后问题存在如下两个不同的解法。
[
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/eight-queens-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/* solution

class Solution {
public:
    vector<vector<string>> res;
    bool canaddQ(vector<string>& board, int deep, int column)
    {
        int n = board.size();

        // column
        for(int i = 0; i < n; ++i)
        {
            if(i != deep && board[i][column] == 'Q') return false;
        }

        // diagonal
        int i = deep + 1;
        int j = column + 1;
        while(i < n && j < n)
        {
            if(board[i][j] == 'Q') return false;
            i++;
            j++;
        }
        i = deep + 1;
        j = column - 1;
        while(i < n && j >= 0)
        {
            if(board[i][j] == 'Q') return false;
            i++;
            j--;
        }
        i = deep - 1;
        j = column - 1;
        while(i >= 0 && j >= 0)
        {
            if(board[i][j] == 'Q') return false;
            i--;
            j--;
        }
        i = deep - 1;
        j = column + 1;
        while(i >= 0 && j < n)
        {
            if(board[i][j] == 'Q') return false;
            i--;
            j++;
        }
        return true;
    }
    void addQ(vector<string>& board, int deep)
    {
        int n = board.size();
        if(deep == n)
        {
            res.push_back(board);
            return;
        }

        for(int i = 0; i < n; ++i)
        {
            if(canaddQ(board, deep, i))
            {
                board[deep][i] = 'Q';
                addQ(board, deep + 1);
                board[deep][i] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        string tem = "";
        vector<string> board;
        // vector<vector<string>> res;
        for(int i = 0; i < n; ++i) tem += ".";
        for(int i = 0; i < n; ++i) board.push_back(tem);

        addQ(board, 0);

        return res;
    }
};

*/
